Welcome to Custom Menus and Screens. Well, custom screens anyway.

====

This is a fairly straightforward mod. You create .json files that define screens and components to place on them.
Within these definition files (also known as ScreenDef files), you will define how big each component is, where it
should be placed, and, most importantly, what should happen when the player clicks that component. That action will
take place on the server. The target audience is mostly modpack developers who would like to present some additional
GUI options to the user independent from whatever is offered by included mods.

This mod is both client and server, required on both. The ScreenDef files do not need to be shared to work, so the
config folder (i.e. .../config/custom_menus_and_screens/) and its contents do not need to be shared with a client
in order to have the screens properly displayed and the server-side actions executed. Of course, if you are
building a modpack, you're likely to ship those configs anyway.

====

At present, there is only one config, Common, and it has only one option.

Config
    Common
        requireScreenDefIdMatchFileName : boolean, default false
            If true, any ScreenDef file must have an id that matches the filename it is defined within.
            For example, if I have a ScreenDef at:
                .../config/custom_menus_and_screens/cheatscreen.json
            then if this setting is true, the 'id' value must also be 'cheatscreen'.
            If false, the id in the ScreenDef file can be anything and need not match the filename.

====

So on to the meat and potatoes, ScreenDef files. As mentioned before, ScreenDef files are .json files. What is shown
below is not valid .json due to the comments; the comments are *only* there to explain the purpose of each value.

KEY NOTE ABOUT preferCommandStack:
    By default, if 'preferCommandStack' is not set for the ScreenDef, nor the ComponentDef that has been triggered,
    the command will be run by the server, without player context. That is, the CommandSourceStack will be generated by:
        server.createCommandSourceStack().withPermission(4)
    If, however, the action contains '@s', the CommandSourceStack will be generated by:
        player.createCommandSourceStack().withPermission(4)
    This is because '@s' (selects the entity that executed the command) has contextual requirements that depend on
    the command being run from the perspective of a player.
    Additionally, if 'preferCommandStack' is in effect, whether because the ComponentDef defined it or inherited it from
    ScreenDef, and the value is PLAYER, the command stack choice will switch to the PLAYER scenario even if the
    action doesn't contain one of the two target selectors. And finally, even if the 'preferCommandStack' value is
    set to SERVER, if the action contains one of the two target selectors, the command will still be executed in the
    PLAYER context.

Description: The ScreenDef below defines a screen with the following characteristics:
    The id is 'test', so commands to open the screen will use 'test' to reference this ScreenDef
    Play will *not* be paused on the client while the screen is open. Only matters on single player worlds
    The default anchor point for components will be from the TOP_RIGHT, but can be overridden by each component
    By default, all commands will be run in the context of the player interacting with the screen
    When closed, the screen will give the player 1 Netherite Ingot, for reasons
    When any of the buttons on the screen are clicked, once they have performed their action, the screen will close

Additionally, there are 3 buttons defined:
    clickmebutton
        It will be anchored from the TOP_RIGHT (inherited from ScreenDef)
        When clicked it will just say a message to the server
        The server command will be executed in the server context (i.e. not attached to a player)
            This overrides the default set by the ScreenDef
    clickmebutton2
        It will be anchored from the BOTTOM_RIGHT, overriding the ScreenDef
        Because langkey is set to 'gui.yesx', it will attempt to look up a translation for that key
            But because the langkey does not exist (it has a typo, I'm sure you can guess), 'text' will be used instead
        When clicked it will give the player a diamond
        The command context will be PLAYER, not only because of the ScreenDef setting but also because the command
            contains '@s', a player specific target selector
    clickmebutton3
        It will be anchored from the TOP_RIGHT (inherited from ScreenDef)
        When clicked it will give the player 1 dirt
        Because langkey is set to 'gui.no', it will attempt to look up a translation for that key
            'gui.no' for the en_us lang returns 'No', so the 'text' value should not be used and 'No' should be displayed

{
    // REQUIRED
    // This is the ScreenDef id. It should be unique among all of your ScreenDef .json files
    // when telling the mod to open a screen, this is the id you reference
	"id": "test",

	// OPTIONAL (defaults to false)
	// Determines whether displaying the screen should pause play. This only affects single player worlds.
	"pause": false,

	// OPTIONAL
	// The title for the screen. It is almost always ignored, but was included to satisfy underlying frameworks.
	"title": "Test Screen",

	// OPTIONAL (defaults to TOP_LEFT)
	"anchor": TOP_RIGHT,

	// OPTIONAL (defaults to SERVER, unless the closingAction contains an @s or @p target selector,
	//          then it switches to PLAYER automatically)
	"preferCommandStack": PLAYER,

	// OPTIONAL
	// A server-side command to run when the screen is closed for any reason (e.g. clicking a button with closeOnInteract
	// set to true or just pressing Escape).
	"closingAction": "give @s minecraft:netherite_ingot",

	// OPTIONAL (defaults to false)
	// If true, any interaction with a component that triggers a server side command will also close the screen.
	// If closingAction is set, that action will also be triggered.
	"closeOnInteract": true,

	// REQUIRED
	// At least one component must be defined. No blank screens, sorry.
	"components": [
	{
	    // REQUIRED
	    // Values for id, type, ax, ay, width, height, and action are all always required and should have pretty
	    // obvious meanings.
		"id": "clickmebutton",
		"type": BUTTON,
		"ax": 1,
		"ay": 1,
		"width": 50,
		"height": 24,

		// REQUIRED (or langkey)
		// For this button, it will always just display "Click me!" in English
		"text": "Click me!",

		// OPTIONAL
		// This won't force the command stack to run in the server context, but if the ScreenDef.preferCommandStack
		// value is set to PLAYER, this will allow a component to override and try *not* to run in player context.
		// Still, if the action contains '@s' or '@p' target selectors, player context will still be used in order
		// to allow the command to run
		"preferCommandStack": SERVER,

		// REQUIRED
		// What to run on the server in response to a button click
		"action": "say I'm on the server and I ran because you clicked on the client UI"
	},
	{
		"id": "clickmebutton2",
		"type": BUTTON,
		"ax": 1,
		"ay": 1,
		"width": 50,
		"height": 24,

		// OPTIONAL
		// We are overriding the ScreenDef.anchor here
		"anchor": BOTTOM_RIGHT,

		// REQUIRED (or langkey)
		// This button defines both 'text' and 'langkey'. As a result, 'langkey' will be looked up as a translation
		// key. If found, that translation will be used. If not found, then the value of 'text' will be used.
		// In this example in particular, the 'langkey' value of 'gui.yesx' contains a typo, so it will fail on lookup
		// and 'text' will get displayed.
		"text": "Or you could Click me!",
		"langKey": "gui.yesx",

		"action": "give @s minecraft:diamond"
	},
	{
		"id": "clickmebutton3",
		"type": BUTTON,
		"ax": 1,
		"ay": 1,
		"width": 50,
		"height": 24,

		// Here again, both text and langkey are specified, but this time 'langKey' will be found and presented.
		"text": "Don't click",
		"langKey": "gui.no",

		"action": "give @s minecraft:dirt"
	}
	]
}